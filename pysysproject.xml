<?xml version="1.0" standalone="yes"?>
<pysysproject>
		
	<!-- 
	Get a reference to the environment, which can then be used as a substitution variable 
	within the project file
	-->
	<property environment="env"/>

	
	<!-- 
	Get a reference to the osfamily, which can then be used as a substitution variable 
	within the project file
	-->
	<property osfamily="osfamily"/>


	<!-- 
	Set a property on the project class. The property can then be used as a substitution variable 
	within the project file, and is also set as an attribute to the project class so it's value 
	can be reference internally within the PySys framework
	 -->	
	<!-- Set apama project details from the environment -->
	<property name="APAMA_LIBRARY_VERSION"   value="${env.APAMA_LIBRARY_VERSION}" default="4.0"/>
	<property name="APAMA_HOME"              value="${env.APAMA_HOME}"/>
	<property name="APAMA_CORRELATOR_HOME"   value="${env.APAMA_CORRELATOR_HOME}"/>
	<property name="APAMA_DEV_HOME"          value="${env.APAMA_DEV_HOME}"/>
	<property name="APAMA_MANAGEMENT_HOME"   value="${env.APAMA_MANAGEMENT_HOME}"/>
	<property name="APAMA_COMMON_JRE"        value="${env.APAMA_COMMON_JRE}"/>

	<!-- Set apama project details which cannot be pulled from the environment -->
	<property name="APAMA_MODELER_HOME"      value="${env.APAMA_HOME}" default="c:\Program Files\Apama ${APAMA_LIBRARY_VERSION}\Event Modeler Professional Edition"/>
	<property name="APAMA_LICENCE"           value="${APAMA_CORRELATOR_HOME}/etc/licence.txt"/>


	<!-- 
	Import properties from file (fails silently if the file does not exist). The imported 
	file should be of the format name=value (one pair specified per line). Any imported names
	can again be used as a substitution variables within the project file, and are also set as 
	attributes to the project class. The value in the imported file can be defined to use 
	substitution through the ${variable} syntax (where variable must be defined before the import
	 -->
	<property file="${osfamily}.properties" />
	

	<!-- 
	Add a path to the python path to allow importing custom modules, e.g. extensions to the 
	BaseTest or BaseRunner classes, or customer test output writers. If the relative attribute 
	is set to true, then the path is treated as relative to the project root location; otherwise 
	the path is treated as absolute
	-->
	<path value="./src" relative="true"/>
	
	
	<!--
	Set the test writers to write the test summary at runtime when the -r option is 
	passed to the run mode of the pysys launcher. Multiple test writers can be configured
	and properties can be set on the writers using a nested property tag; these are then set 
	as attributes of the class. PySys ships the XMLResultsWriter and TextResultsWriter as two 
	example writers, though custom writers can be created e.g. to output directly in HTML, 
	insert into a relational database etc (see pysys.writers.__init__.py for the source code 
	for the distributed writers). If no writer is specified in the project file, the 
	XMLResultsWriter is used. 
	
	The writer tag details the classname (which should be added to the pythonpath using the 
	path tag), the module of the writer class, and the filename template to use for the logging. 
	The filename template is processed through time.strftime so that time information can be set 
	into the filename, e.g. a filename template of 'testsummary-%Y%m%d%H%M%S.xml' will result in 
	a file created with a name of  testsummary-20081025213308.xml etc.
	-->
	<writers>
		<writer classname="XMLResultsWriter" module="pysys.writer" file="testsummary.xml">
			<!--
			Set properties on the XML test output writer class. The available properties that 
			can be set are the stylesheet location, and whether to use file URLs in all 
			references to resources on the local disk. Note that Mozilla Firefox requires the 
			stylesheet to be located next to the XML file when loading the file, and all references
			to local resources must be as file URLs. Internet Explorer and Chrome can load the 
			stylesheet from any location on the local disk, but cannot load resources when referenced 
			by a file URL - go figure. 
			
			<property name="stylesheet" value="./pysys-log.xsl"/>
			<property name="useFileURL" value="true"/>
			-->
		</writer>	
		<!--
		Add in the test results writer if straight text output is required 
		
		<writer classname="TextResultsWriter" module="pysys.writer" file="testsummary-%Y%m%d%H%M%S.log">
		-->
	</writers>		
	
	
	<!-- 
	Use a custom runner class that extends the BaseRunner class distributed with PySys. Extensions to 
	the BaseRunner are used to define custom setup and tear down operations before running the set of 
	selected tests (e.g. to load test data into a relational database prior to the test runs, and then 
	clear out the data on completion), as well as to defined operations between the execution of individual 
	tests and after completion of a cycle of tests. 
	-->
	<runner classname="ApamaRunner" module="progress.apama.runner"/>

</pysysproject>